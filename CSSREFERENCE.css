          /* ATTRIBUTE SELECTORS */


/* <a href='www.youtube.com/jessecox' id='thisID'></a> */

/*if the attribute contains the value anywhere*/
a[href*='youtube'] {
  color: orange;
}

/*if the attribute starts with*/
a[href^='www.youtube.com'] {
  color: orange;
}

/*if the attribute ends with*/
a[href$='jessecox'] {
  color: orange;
}


/* <a href='www.youtube.com' class='this that theOther'*/

/*if the attribute is in a space separated list and your selector requires it to be surrounded by spaces*/
/*this is different from 'contains the value anywhere' because it can select 'that' from 'this that theOther' but not from 'thisthattheOther'*/
a[href~='that'] {
  color: orange;
}

/* You can also use multiple attribute selectors in a selector, all of which must be true for the properties to apply*/
a[href^='www.youtube.com'][href$='jessecox'] {
  color: orange;
}


/* CHILD SELECTOR */
/* > */
/*It allows you to target elements that are direct children of a particular element*/
#aDiv > p {
  /*This will select paragraphs that are direct children of something with the ID 'aDiv', but not all paragraphs within that ID*/
  color: orange;
}

          /*SIBLING COMBINATORS*/


/*Adjacent Sibling Combinator*/
/* + */
/* allows you to target an element that has the same parent, and comes directly after another element */
p + h2 {
  /*This selects all h2's that directly follow a paragraph, as long as they have the same parent*/
  color: orange;
}

/* General Sibling Combinator*/
/* ~ */
/* similar to adjacent, this allows for, within the same parent, selecting of elements that come after, but not directly after, another element */
.post h1 ~ p {
  /*This selects any paragraphs that come after an h1 within something with the class 'post'*/
  color: orange;
}


          /* DYNAMIC PSEUDO CLASSES */


/* these only change things when the user interacts with the selected element */
/* :link and :visited apply to links that haven't (:link) or have (:visited) been accessed by the user */
a :link {
  color: blue;
}
a :visited {
  color: red;
}

/* :hover */
/* :hover activates when a users moves their mouse over an element */
a :hover {
  color: black;
}

/* :active */
/* :active is only ...active when the user is clicking on the elment */
a :active {
  color: green;
}

/* :focus */
/* :focus, usually used in form elements, changes only while that element is in use, or focussed */
input[type='text']:focus {
  border: 3px solid green;
}


          /* UI PSEUDO SELECTORS*/
    /* Mostly for form elements */

/* :enabled */
/* checks whether the element is enabled */
input[type='text']:enabled {
  border: 3px solid green;
}

/* :disabled */
/* check whether it's disabled */
input[type='text']:disabled {
  border: 3px solid green;
}

/* :checked */
/* checks if the element (radio, checkbox) is checked */
input[type='text']:checked {
  border: 3px solid green;
}


          /* STRUCTURAL PSEUDO CLASSES */

  
/* :first-child */
/* selects any element that is the first child of the selected element */
#thisDiv:first-child {
  color: orange;
}

/* :last-child */
/* selects the last of child of the selected element */
#thisDiv:last-child {
  color: orange;
}

/* :nth-child(#) */
/* gets the nth numbered child after your selected element */
#thisDiv:nth-child(3) {
  color: orange;
}

/* :only-child */
/* checks if there is only one child in an element, and applies if it returns true */
#thisDiv > p:only-child {
  font-size: 0.8em;
  /* if #thisDiv's only child is a paragraph, the font size will change*/
}

/* :empty */
/* checks whether the element is empty before applying styles */
#thisDiv:empty {
  background-color: grey;
}

/* :after*/
/* does something after the selected element*/
#thisDiv:after {
  content: '.';
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
  /* this creates a new element after the 'thisDiv' element, gives it a '.' as it's content, and hides it with no height */
  /* it's used in cases of a container not expanding to fit it's floated elements, and essentially makes an invisible element to recalculate the height */
  /* can also be achieved by using 'overflow:auto' on the containing element. known as 'clearfix' */
}

          /* NEGATION PSEUDO CLASS */


/* :not(something) */
/* if the selected element is NOT what's contained in the parentheses, the styles will apply */
input:not[type='text'] {
  border: 3px solid green;
}

          /* PSEUDO-ELEMENTS */
          /* elements that don't exist within HTML, but are selectable with CSS */


/* ::first-line */
/* Styles the first line of a block, inline-block, table-caption, or table-cell */
.paragraphOne::first-line {
  text-decoration: underline;
}

/* ::first-letter */
/* styles the first letter of a block, unless it's preceded by other content, like an image, on the same line */
.paragraphOne::first-letter {
  font-size: 3em;
}